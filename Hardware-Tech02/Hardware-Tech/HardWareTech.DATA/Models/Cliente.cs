// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace HardWareTech.DATA.Models
{
    public partial class Cliente
    {
        public Cliente()
        {
            ProdutoClienteManutencao = new HashSet<ProdutoClienteManutencao>();
            Venda = new HashSet<Venda>();
        }

        [Key]
        [Column("id")]
        public int Id { get; set; }
        [Required]
        [Column("CPF")]
        [StringLength(14)]
        [Unicode(false)]
        public string Cpf { get; set; }
        [Required]
        [Column("nome_cliente")]
        [StringLength(50)]
        [Unicode(false)]
        public string NomeCliente { get; set; }
        [Required]
        [Column("endereco")]
        [StringLength(50)]
        [Unicode(false)]
        public string Endereco { get; set; }
        [Required]
        [Column("cidade")]
        [StringLength(50)]
        [Unicode(false)]
        public string Cidade { get; set; }
        [Required]
        [Column("bairro")]
        [StringLength(50)]
        [Unicode(false)]
        public string Bairro { get; set; }
        [Required]
        [Column("telefone")]
        [StringLength(20)]
        [Unicode(false)]
        public string Telefone { get; set; }
        [Required]
        [Column("email")]
        [StringLength(255)]
        [Unicode(false)]
        public string Email { get; set; }
        [Required]
        [Column("numero_endereco")]
        [StringLength(10)]
        [Unicode(false)]
        public string NumeroEndereco { get; set; }

        [InverseProperty("IdClienteNavigation")]
        public virtual ICollection<ProdutoClienteManutencao> ProdutoClienteManutencao { get; set; }
        [InverseProperty("IdClienteNavigation")]
        public virtual ICollection<Venda> Venda { get; set; }

        public bool ValidarCPF(string cpf)
        {
            cpf = cpf.Replace(".", "").Replace("-", "");
            if (cpf.Length != 11)
                return false;

            bool repetido = true;
            for (int i = 1; i < 11 && repetido; i++)
                if (cpf[i] != cpf[0])
                    repetido = false;

            if (repetido || cpf == "12345678909")
                return false;

            int[] numeros = new int[11];
            for (int i = 0; i < 11; i++)
                numeros[i] = int.Parse(cpf[i].ToString());

            int soma = 0;
            for (int i = 0; i < 9; i++)
                soma += (10 - i) * numeros[i];

            int resultado = soma % 11;
            if (resultado == 1 || resultado == 0)
            {
                if (numeros[9] != 0)
                    return false;
            }
            else if (numeros[9] != 11 - resultado)
                return false;

            soma = 0;
            for (int i = 0; i < 10; i++)
                soma += (11 - i) * numeros[i];

            resultado = soma % 11;
            if (resultado == 1 || resultado == 0)
            {
                if (numeros[10] != 0)
                    return false;
            }
            else if (numeros[10] != 11 - resultado)
                return false;

            return true;
        }
    }
}